package m9_w3;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Baekjoon_14499_주사위굴리기 {
	
	static class Dice {
		int top, bottom, west, east, south, north;
		
		public Dice() {
			this.top = 0; this.bottom = 0;
			this.west = 0; this.east = 0;
			this.south = 0; this.north = 0;
		}
		
		public void moveEast() {
			int temp = top;
			top = west;
			west = bottom;
			bottom = east;
			east = temp;
		}
		
		public void moveWest() {
			int temp = top;
			top = east;
			east = bottom;
			bottom = west;
			west = temp;
		}
		
		public void moveSouth() {
			int temp = top;
			top = north;
			north = bottom;
			bottom = south;
			south = temp;
		}
		
		public void moveNorth() {
			int temp = top;
			top = south;
			south = bottom;
			bottom = north;
			north = temp;
		}
	}

	static int N, M, x, y, K;
	static int[][] map;
	static int[] move;
	static int[] dx = {0, 0, 0, -1, +1}; // 동,서,북,남 (1,2,3,4)
	static int[] dy = {0, +1, -1, 0, 0};
	
	public static void main(String[] args) throws Exception {
		// 필요한 것 : 지도 2차원배열, 주사위 1차원배열 (각 위치에 숫자가 몇인지), 주사위 위치 알려주는 2차원 배열(지도와 같은 크기)->주사위 아랫면 나타냄
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		x = Integer.parseInt(st.nextToken());
		y = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		
		map = new int[N][M];
		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		move = new int[K];
		st = new StringTokenizer(br.readLine(), " ");
		for(int i = 0; i < K; i++) {
			move[i] = Integer.parseInt(st.nextToken());
		}
		
		Dice dice = new Dice();
		int nx, ny;
		
		for(int k = 0; k < K; k++) {
			// 주사위 이동 (이동하는 위치의 칸이 0인지 아닌지 체크하며 이동)
			int direction = move[k];
			nx = x + dx[direction];
			ny = y + dy[direction];
			//System.out.println(nx + " " + ny);
			
			// 범위를 벗어나면 제외
			if(nx < 0 || ny < 0 || nx >= N || ny >= M) continue;
			
			if(direction == 1) dice.moveEast();
			else if(direction == 2) dice.moveWest();
			else if(direction == 3) dice.moveNorth();
			else if(direction == 4) dice.moveSouth();
			
			if(map[nx][ny] == 0)
				map[nx][ny] = dice.bottom;
			else {
				dice.bottom = map[nx][ny];
				map[nx][ny] = 0;
			}
			System.out.println(dice.top);

			x = nx;
			y = ny;
		}
	}

}

package m9_w1;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Baekjoon_15686_치킨배달 {

	static int N, M, min = Integer.MAX_VALUE;
	static int[][] map, chick;
	static boolean[] visited;
	static ArrayList<Chicken> chickens;
	
	static class Chicken {
		int x, y;
		
		public Chicken(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken()); // 남겨야되는 치킨집 개수
		chickens = new ArrayList<>();
		chick = new int[M][2];
		map = new int[N][N];

		for(int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			for(int j = 0; j < N; j++) {
				//0은 빈칸, 1은 집, 2는 치킨 집
				map[i][j] = Integer.parseInt(st.nextToken());
				if(map[i][j] == 2) chickens.add(new Chicken(i,j));
			}
		}
		
		visited = new boolean[chickens.size()];
		
		// 현재있는 치킨집 수와 M이 같은 경우
		if(chickens.size() == M) {
			for(int i = 0; i < M; i++) {
				chick[i][0] = chickens.get(i).x;
				chick[i][1] = chickens.get(i).y;
			}
			System.out.println(getDistance());
			
		}
		else {
			choiceM(0,0);
			System.out.println(min);
		}

		
	}
	// chicken중에서 M개만 남기기
	static void choiceM(int index, int cnt) {
		if(cnt == M) {
			int j = 0;
			for(int i = 0; i < chickens.size(); i++) {
				if(visited[i]) {
					chick[j][0] = chickens.get(i).x; 
					chick[j][1] = chickens.get(i).y; 
					j++;
				}
			}
			min = Math.min(getDistance(), min);
		}
		
		for(int i = index; i < chickens.size(); i++) {
			if(visited[i]) continue;

			visited[i] = true;
			choiceM(i+1, cnt+1);
			visited[i] = false;
			
		}
	}
	
	// 거리 계산하고 그 중 최솟값 리턴
	static int getDistance() {
		int distance = 0, sum = 0;
		
		for(int i = 0; i < N; i++) {
			for(int j = 0; j < N; j++) {
				
				if(map[i][j] == 1) {
					int min = Integer.MAX_VALUE; // 최솟값 초기화
					
					for(int k = 0; k < M; k++) {
						distance = Math.abs(i-chick[k][0]) + Math.abs(j-chick[k][1]); 
						min = Math.min(min, distance); // 집에서 치킨집까지 가장 거리가 작은 치킨집을 골라
					}
					sum += min;
				}
			}
		}
		return sum;
	}
}
